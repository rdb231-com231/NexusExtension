{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Nexus",
    "fileTypes": [".nxs"],
    "foldingStartMarker": "(^\\s*(def|if|range|while).*\\sdo$)",
    "foldingStopMarker": "^\\s*end\\b",
    
    "patterns": [
        {"include": "#comments"},
        {"include": "#strings"},
        {"include": "#keywords"},
        {"include": "#exceptionKeywords"},
        {"include": "#types"},
        {"include": "#builtins"},
        {"include": "#functions"},
        {"include": "#operators"},
        {"include": "#numbers"},
        {"include": "#params"},
        {"include": "#variables"},
        {"include": "#blocks"}
    ],
    "repository": {
        "keywords": {
            "patterns": [{
                "name": "keyword.control.nxs",
                "match": "\\b(def|using|nexus|as|if|else|range|to|change|while|continue|break|return|end|do)\\b"
            }]
        },
        "exceptionKeywords": {
            "patterns": [{
                "name": "keyword.control.exception.nxs",
                "match": "\\b(raise|check)\\b"
            }]
        },
        "blocks": {
            "patterns": [{
                "name": "meta.block.nxs",
                "begin": "\\b(if|range|while)\\b.*\\sdo\\b",
                "end": "\\bend\\b",
                "beginCaptures": {
                    "1": { "name": "keyword.control.nxs" },
                    "2": { "name": "keyword.control.do.nxs" }
                },
                "patterns": [
                    { "include": "$self" }
                ]
            }]
        },
        "types": {
            "patterns": [{
                "name": "storage.type.nxs",
                "match": "\\b(string|int|list|function|bool)\\b"
            }]
        },
        "builtins": {
            "patterns": [{
                "name": "support.function.nxs",
                "match": "\\b(write|type|isstr|isint|islist|append|replace|extend|input|input_int|writert|get|del|reverse|len|copy|int|str|run|join)\\b"
            }]
        },
        "params": {
            "patterns": [
                {
                    "name": "variable.parameter.nxs",
                    "match": "(?<=using\\s*\\()[a-zA-Z_][a-zA-Z0-9_]*(?=[,\\)])"
                },
                {
                    "name": "variable.parameter.nxs",
                    "match": "(?<=\\()[a-zA-Z_][a-zA-Z0-9_]*(?=[,\\)])"
                },
                {
                    "name": "variable.parameter.nxs",
                    "match": "(?<=,\\s*)[a-zA-Z_][a-zA-Z0-9_]*(?=[,\\)])"
                }
            ]
        },
        "functions": {
            "patterns": [
            {
                "name": "entity.name.function.nxs",
                "match": "(?<=^\\s*def\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s+using\\s*\\()"
            },
            {
                "name": "entity.name.function.nxs",
                "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
            }
        ]},
        "strings": {
            "name": "string.quoted.double.nxs",
            "begin": "\"",
            "end": "\"",
            "patterns": [{
                "name": "constant.character.escape.nxs",
                "match": "\\\\."
            }]
        },
        "operators": {
            "patterns": [{
                "name": "keyword.operator.nxs",
                "match": "(==|!=|<=|>=|<|>|\\+|-|\\*|/|%|=|\\+=|\\-=|\\*=|/=|%=|\\band\\b|\\bor\\b|\\bnot\\b|,)"
            }]
        },
        "numbers": {
            "patterns": [{
                "name": "constant.numeric.nxs",
                "match": "\\b[0-9]+\\b"
            }]
        },
        "comments": {
            "patterns": [{
                "name": "comment.line.number-sign.nxs",
                "match": "#.*$"
            }]
        },
        "variables": {
            "patterns": [{
                "name": "variable.nxs",
                "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            }]
        }
    },
    "scopeName": "source.nxs"
}